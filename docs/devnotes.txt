Started with https://github.com/angular/universal-starter

on "npm install", two issues were addressed:
  1) many warnings about peerDependency mismatches

     in package.json, updated minimum version for @nguniversal/* to
     7.0.2.  Reran npm install, all fixed.

  2) detected 1 vulnerability with webpack-dev-server
     - a depenendency of @angular-devkit/build-angular, which is
       itself a devDependency.
     - 'npm audit' says need v3.1.11
     - couldn't figure out how to force it to get that version
     - @angular-devkit/build-angular required by start script
     - ignored issue, since it is a dev-time issue only

Confirmed sample app works both client-side only and under ssr.

In package.json, angular.json:  change ng-universal-demo to oar-lps

global styles:
  angular.json, under its "build" config, identfies style files to be
  loaded globally.  These are compiled into a minified version.

start up:
client-only:
  1. index runs main.ts:
     when HTML DOM content is loaded, the AppModule is bootstrapped.

  2. AppModule's bootstrap component is constructed and inserted into
     the DOM at <app-root> element.

server-side:
  1. server.ts runs:
     a. loads dist/server/main.js (compiled from main.server.ts?)
     b. bootstraps AppServerModule

  2. AppServerModule's bootstrap component is constructed and inserted into
     the DOM at <app-root> element.

Testing

from https://stackoverflow.com/questions/46051134/does-karma-coexist-with-jasmine:

Karma: is a tool which spawns a web server that executes source code against
test code for each of the browsers connected. The results of each test against
each browser are examined and displayed via the command line to the developer.

Jasmine: is a development framework for testing js code. It does not depend on
any other JavaScript frameworks. It does not require a DOM. And it has a
clean, obvious syntax so that you can easily write tests.

CLI-provided versions for karma & jasmine featured detected vulnerabilities:
  updated to most recent version to get rid of them.

Had to update karma-jasmine-html-reporter to 1.4.0 to work with jasmine 3.1.0.

Providers/DI:

About values to NgModule's providers array property:
   * a class name, e.g. ClassName, is equivalent to
     { provide=ClassName, useClass=ClassName }
   * to instantiate a sub-class, use:
     { provide=ClassName, useClass=SubClassName }
   * to use a factory function, use:
     { provide=ClassName, useFactor=function }
     The function must return either an instance of the class.  NOTE:
     Only in the case of APP_INITIALIZER can you alternatively return a
     Promise!
   * use a provider entry with APP_INITIALIZER (from @angular/core) to insert
     custom code into the initialization process:
     { provide : APP_INITIALIZER, useFactory: myInitFunction,
       deps: [args to fact. func.] }
   * can provide multiple APP_INITIALIZER provider entries; if so, use multi: true
   * APP_INITIALIZER is a injection token pointing to a list of void
     functions; thus can't be used to actually inject something into another service.

About @Inject:
   * parameter decorator used on constructor parameter
   * used to give instruction on how in inject a value; if not provided, the
     class of the parameter will be used to lookup value
   * use required when the parameter is not an object with a type name (e.g. a
     primitive)
   * in @Inject(token), token is the injection token used to do the lookup.
   * Example:
      * PLATFORM_ID from @angular/core is an instance of Injection<object>
      * @Inject(PLATFORM_ID) platId : object -- injects value into platId
      * In this case, PLATFORM_ID's provider has already made available to
        the root module, so it does not need to be explicitly listed in the
        AppModule's providers property.  
     
   
Debugging

temporarily edit karma.config.js to set "single-run: false"
  * is there a per-launcher way to do this so that this switch is not necessary?

Run tests with "ng test --browsers=Chrome"

Click "DEBUG" button; in new tab, open Chrome debugger
Click on "Sources", select file to debug, set breakpoints, etc.
Control-C out of ng

About @Injectable:
  * See https://www.amadousall.com/angular-services-3-common-misconceptions-about-the-injectable-decorator/
  * @Injectable does not do what its name implies.  It is only required when
    the injectable class itself has dependencies requiring injection--i.e. it
    has a constructor with arguments provided by an Injector.
  * If the constructor has arguments that are intended to be provided by a
    factory (e.g. via useFactory), @Injectable shoud not be used.  Its
    presence will otherwise cause the Angular compiler (ng) to try to
    determine it is suppose to inject instances of the arguments (which it is
    not suppose to).

Injecting RESPONSE

To successfully inject the HTTP response:
  * In server.ts, be sure the response (res) is provided in the routing: 
      // All regular routes use the Universal engine
      app.get('*', (req, res) => {
        res.render('index', { req, res });
      });                          ^^^
  * use of the ngExpressEngine automatically configures providers for them.  
  * sometimes it is necessary to inject the Injector into classes that
    need it and use the Injector to get the RESPONSE instance.  
       
  
